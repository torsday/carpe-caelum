module Queries
  class WeatherQuery < GraphQL::Schema::Resolver
    def resolve: (
      latitude: Float,
      longitude: Float
    ) -> Hash[Symbol, String | Float | nil]

    private

    def initialize_weather_service: () -> WeatherService

    def fetch_current_temperature: (
      weather_service: WeatherService,
      latitude: Float,
      longitude: Float
    ) -> Float?

    def fetch_temperature_low: (
      weather_service: WeatherService,
      latitude: Float,
      longitude: Float
    ) -> Float?

    def fetch_temperature_high: (
      weather_service: WeatherService,
      latitude: Float,
      longitude: Float
    ) -> Float?

    def fetch_current_conditions: (
      weather_service: WeatherService,
      latitude: Float,
      longitude: Float
    ) -> String?

    def handle_error: (error: StandardError) -> Hash[Symbol, String | Float | nil]
  end
end

module GraphQL
  module Schema
    class Resolver
      def self.type: (
        return_type: Class,
        null: bool
      ) -> void

      def self.argument: (
        name: Symbol,
        type: Class,
        required: bool,
        description: String
      ) -> void
    end
  end
end
